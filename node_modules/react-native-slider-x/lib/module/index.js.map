{"version":3,"sources":["index.tsx"],"names":["React","PureComponent","Animated","Image","StyleSheet","PanResponder","View","Easing","I18nManager","TRACK_SIZE","THUMB_SIZE","Rect","constructor","x","y","width","height","containsPoint","DEFAULT_ANIMATION_CONFIGS","spring","friction","tension","timing","duration","easing","inOut","ease","delay","SizeEnum","EventEnum","Slider","props","e","_thumbHitTest","_previousLeft","_getThumbLeft","_getCurrentValue","_fireChangeEvent","onSlidingStart","_e","gestureState","disabled","_setCurrentValue","_getValue","onValueChange","onSlidingComplete","layout","_handleMeasure","_containerSize","_trackSize","_thumbSize","storeName","nativeEvent","size","currentSize","setState","containerSize","trackSize","thumbSize","allMeasured","value","minimumValue","maximumValue","nonRtlRatio","_getRatio","ratio","isRTL","state","step","length","thumbLeft","dx","Math","max","min","round","currentValue","setValue","animationType","animationConfig","Object","assign","toValue","start","event","callback","thumbTouchSize","_getTouchOverflowSize","touchOverflowStyle","undefined","verticalMargin","marginTop","marginBottom","horizontalMargin","marginLeft","marginRight","debugTouchArea","backgroundColor","opacity","thumbTouchRect","_getThumbTouchRect","locationX","locationY","touchOverflowSize","positionStyle","left","top","defaultStyles","debugThumbTouchArea","thumbImage","renderThumb","Value","_panResponder","create","onStartShouldSetPanResponder","_handleStartShouldSetPanResponder","onMoveShouldSetPanResponder","_handleMoveShouldSetPanResponder","onPanResponderGrant","_handlePanResponderGrant","onPanResponderMove","_handlePanResponderMove","onPanResponderRelease","_handlePanResponderEnd","onPanResponderTerminationRequest","_handlePanResponderRequestEnd","onPanResponderTerminate","addListener","getParams","o","name","componentDidUpdate","prevProps","newValue","animateTransitions","_setCurrentValueAnimated","render","minimumTrackTintColor","maximumTrackTintColor","thumbTintColor","styles","style","trackStyle","thumbStyle","other","mainStyles","interpolate","inputRange","outputRange","minimumTrackWidth","valueVisibleStyle","minimumTrackStyle","position","add","_getTouchOverflowStyle","container","_measureContainer","track","_measureTrack","_measureThumb","thumb","transform","translateX","translateY","_renderThumbImage","touchArea","panHandlers","_renderDebugThumbTouchRect","_getPropsForComponentUpdate","otherProps","justifyContent","borderRadius","right","bottom"],"mappings":"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","sourcesContent":["import React, { PureComponent } from 'react';\n\nimport {\n  Animated,\n  Image,\n  StyleSheet,\n  PanResponder,\n  View,\n  Easing,\n  I18nManager,\n  ImageSourcePropType,\n  StyleProp,\n  ViewStyle,\n  PanResponderInstance,\n  LayoutChangeEvent,\n  GestureResponderEvent,\n  PanResponderGestureState,\n} from 'react-native';\n\nconst TRACK_SIZE = 4;\nconst THUMB_SIZE = 20;\n\nclass Rect {\n  x: number;\n  y: number;\n  width: number;\n  height: number;\n  constructor(x: number, y: number, width: number, height: number) {\n    this.x = x;\n    this.y = y;\n    this.width = width;\n    this.height = height;\n  }\n\n  containsPoint(x: number, y: number) {\n    return (\n      x >= this.x &&\n      y >= this.y &&\n      x <= this.x + this.width &&\n      y <= this.y + this.height\n    );\n  }\n}\n\nconst DEFAULT_ANIMATION_CONFIGS = {\n  spring: {\n    friction: 7,\n    tension: 100,\n  },\n  timing: {\n    duration: 150,\n    easing: Easing.inOut(Easing.ease),\n    delay: 0,\n  },\n};\n\ninterface SliderProps {\n  /**\n   * Initial value of the slider. The value should be between minimumValue\n   * and maximumValue, which default to 0 and 1 respectively.\n   * Default value is 0.\n   *\n   * *This is not a controlled component*, e.g. if you don't update\n   * the value, the component won't be reset to its inital value.\n   */\n  value: number;\n\n  /**\n   * If true the user won't be able to move the slider.\n   * Default value is false.\n   */\n  disabled?: boolean;\n\n  /**\n   * Initial minimum value of the slider. Default value is 0.\n   */\n  minimumValue: number;\n\n  /**\n   * Initial maximum value of the slider. Default value is 1.\n   */\n  maximumValue: number;\n\n  /**\n   * Step value of the slider. The value should be between 0 and\n   * (maximumValue - minimumValue). Default value is 0.\n   */\n  step: number;\n\n  /**\n   * The color used for the track to the left of the button. Overrides the\n   * default blue gradient image.\n   */\n  minimumTrackTintColor: string;\n\n  /**\n   * The color used for the track to the right of the button. Overrides the\n   * default blue gradient image.\n   */\n  maximumTrackTintColor: string;\n\n  /**\n   * The color used for the thumb.\n   */\n  thumbTintColor: string;\n\n  /**\n   * The size of the touch area that allows moving the thumb.\n   * The touch area has the same center has the visible thumb.\n   * This allows to have a visually small thumb while still allowing the user\n   * to move it easily.\n   * The default is {width: 40, height: 40}.\n   */\n  thumbTouchSize: { width: number; height: number };\n\n  /**\n   * Callback continuously called while the user is dragging the slider.\n   */\n  onValueChange: (value: number) => void;\n\n  /**\n   * Callback called when the user starts changing the value (e.g. when\n   * the slider is pressed).\n   */\n  onSlidingStart?: (value: number) => void;\n\n  /**\n   * Callback called when the user finishes changing the value (e.g. when\n   * the slider is released).\n   */\n  onSlidingComplete?: (value: number) => void;\n\n  /**\n   * The style applied to the slider container.\n   */\n  style?: StyleProp<ViewStyle>;\n\n  /**\n   * The style applied to the slider container.\n   */\n  styles?: StyleProp<ViewStyle>;\n\n  /**\n   * The style applied to the track.\n   */\n  trackStyle?: StyleProp<ViewStyle>;\n\n  /**\n   * The style applied to the thumb.\n   */\n  thumbStyle?: StyleProp<ViewStyle>;\n\n  /**\n   * Sets an image for the thumb.\n   */\n  thumbImage?: ImageSourcePropType;\n\n  /**\n   * Set this to true to visually see the thumb touch rect in green.\n   */\n  debugTouchArea: boolean;\n\n  /**\n   * Set to true to animate values with default 'timing' animation type\n   */\n  animateTransitions?: boolean;\n\n  /**\n   * Custom Animation type. 'spring' or 'timing'.\n   */\n  animationType: 'spring' | 'timing';\n\n  /**\n   * Used to configure the animation parameters.  These are the same parameters in the Animated library.\n   */\n  animationConfig?:\n    | Animated.SpringAnimationConfig\n    | Animated.TimingAnimationConfig;\n\n  renderThumb?: () => React.ReactElement;\n}\n\ninterface Size {\n  width: number;\n  height: number;\n}\n\nenum SizeEnum {\n  _containerSize = '_containerSize',\n  _trackSize = '_trackSize',\n  _thumbSize = '_thumbSize',\n}\n\nenum EventEnum {\n  onSlidingStart = 'onSlidingStart',\n  onValueChange = 'onValueChange',\n  onSlidingComplete = 'onSlidingComplete',\n}\n\ninterface SliderState {\n  containerSize: Size;\n  trackSize: Size;\n  thumbSize: Size;\n  allMeasured: boolean;\n  value: Animated.Value;\n}\n\nexport default class Slider extends PureComponent<SliderProps, SliderState> {\n  static defaultProps = {\n    value: 0,\n    minimumValue: 0,\n    maximumValue: 1,\n    step: 0,\n    minimumTrackTintColor: '#3f3f3f',\n    maximumTrackTintColor: '#b3b3b3',\n    thumbTintColor: '#343434',\n    thumbTouchSize: { width: 40, height: 40 },\n    debugTouchArea: false,\n    animationType: 'timing',\n    onValueChange: () => {},\n  };\n\n  private _panResponder: PanResponderInstance;\n\n  private _previousLeft: number;\n\n  private _containerSize?: Size;\n\n  private _trackSize?: Size;\n\n  private _thumbSize?: Size;\n\n  private currentValue: number;\n\n  constructor(props: SliderProps) {\n    super(props);\n    this.state = {\n      containerSize: { width: 0, height: 0 },\n      trackSize: { width: 0, height: 0 },\n      thumbSize: { width: 0, height: 0 },\n      allMeasured: false,\n      value: new Animated.Value(props.value || 0),\n    };\n    this._panResponder = PanResponder.create({\n      onStartShouldSetPanResponder: this._handleStartShouldSetPanResponder,\n      onMoveShouldSetPanResponder: this._handleMoveShouldSetPanResponder,\n      onPanResponderGrant: this._handlePanResponderGrant,\n      onPanResponderMove: this._handlePanResponderMove,\n      onPanResponderRelease: this._handlePanResponderEnd,\n      onPanResponderTerminationRequest: this._handlePanResponderRequestEnd,\n      onPanResponderTerminate: this._handlePanResponderEnd,\n    });\n    this._previousLeft = 0;\n    this.currentValue = 0;\n    this.state.value.addListener(({ value }) => {\n      this.currentValue = value;\n    });\n  }\n\n  getParams<T extends object, K extends keyof T>(o: T, name: K): T[K] {\n    return o[name];\n  }\n\n  componentDidUpdate(prevProps: SliderProps) {\n    const newValue = this.props.value || 0;\n\n    if (prevProps.value !== newValue) {\n      if (this.props.animateTransitions) {\n        this._setCurrentValueAnimated(newValue);\n      } else {\n        this._setCurrentValue(newValue);\n      }\n    }\n  }\n\n  render() {\n    const {\n      minimumValue = 0,\n      maximumValue = 100,\n      minimumTrackTintColor,\n      maximumTrackTintColor,\n      thumbTintColor,\n      thumbImage,\n      styles,\n      style,\n      trackStyle,\n      thumbStyle,\n      debugTouchArea,\n      onValueChange,\n      thumbTouchSize,\n      animationType,\n      animateTransitions,\n      ...other\n    } = this.props;\n    const { value, containerSize, thumbSize, allMeasured } = this.state;\n    const mainStyles = Object.assign({}, styles, defaultStyles);\n    const thumbLeft = value.interpolate({\n      inputRange: [minimumValue, maximumValue],\n      outputRange: I18nManager.isRTL\n        ? [0, -(containerSize.width - thumbSize.width)]\n        : [0, containerSize.width - thumbSize.width],\n      // extrapolate: 'clamp',\n    });\n    const minimumTrackWidth = value.interpolate({\n      inputRange: [minimumValue, maximumValue],\n      outputRange: [0, containerSize.width - thumbSize.width],\n      // extrapolate: 'clamp',\n    });\n    const valueVisibleStyle: { opacity?: number } = {};\n    if (!allMeasured) {\n      valueVisibleStyle.opacity = 0;\n    }\n\n    const minimumTrackStyle = {\n      position: 'absolute',\n      width: Animated.add(minimumTrackWidth, thumbSize.width / 2),\n      backgroundColor: minimumTrackTintColor,\n      ...valueVisibleStyle,\n    };\n\n    const touchOverflowStyle = this._getTouchOverflowStyle();\n\n    return (\n      <View\n        {...other}\n        style={[mainStyles.container, style]}\n        onLayout={this._measureContainer}\n      >\n        <View\n          style={[\n            { backgroundColor: maximumTrackTintColor },\n            mainStyles.track,\n            trackStyle,\n          ]}\n          renderToHardwareTextureAndroid\n          onLayout={this._measureTrack}\n        />\n        <Animated.View\n          renderToHardwareTextureAndroid\n          style={[mainStyles.track, trackStyle, minimumTrackStyle]}\n        />\n        <Animated.View\n          onLayout={this._measureThumb}\n          renderToHardwareTextureAndroid\n          style={[\n            { backgroundColor: thumbTintColor },\n            mainStyles.thumb,\n            thumbStyle,\n            {\n              transform: [{ translateX: thumbLeft }, { translateY: 0 }],\n              ...valueVisibleStyle,\n            },\n          ]}\n        >\n          {this._renderThumbImage()}\n        </Animated.View>\n        <View\n          renderToHardwareTextureAndroid\n          style={[defaultStyles.touchArea, touchOverflowStyle]}\n          {...this._panResponder.panHandlers}\n        >\n          {debugTouchArea === true &&\n            this._renderDebugThumbTouchRect(minimumTrackWidth)}\n        </View>\n      </View>\n    );\n  }\n\n  _getPropsForComponentUpdate(props: SliderProps) {\n    const {\n      value,\n      onValueChange,\n      onSlidingStart,\n      onSlidingComplete,\n      style,\n      trackStyle,\n      thumbStyle,\n      ...otherProps\n    } = props;\n\n    return otherProps;\n  }\n\n  _handleStartShouldSetPanResponder = (\n    e: GestureResponderEvent /* gestureState: Object */\n  ): boolean =>\n    // Should we become active when the user presses down on the thumb?\n    this._thumbHitTest(e);\n\n  _handleMoveShouldSetPanResponder(/* e: Object, gestureState: Object */): boolean {\n    // Should we become active when the user moves a touch over the thumb?\n    return false;\n  }\n\n  _handlePanResponderGrant = (/* e: Object, gestureState: Object */) => {\n    this._previousLeft = this._getThumbLeft(this._getCurrentValue());\n    this._fireChangeEvent(EventEnum.onSlidingStart);\n  };\n\n  _handlePanResponderMove = (\n    _e: GestureResponderEvent,\n    gestureState: PanResponderGestureState\n  ) => {\n    if (this.props.disabled) {\n      return;\n    }\n\n    this._setCurrentValue(this._getValue(gestureState));\n    this._fireChangeEvent(EventEnum.onValueChange);\n  };\n\n  _handlePanResponderRequestEnd() {\n    // Should we allow another component to take over this pan?\n    return false;\n  }\n\n  _handlePanResponderEnd = (\n    _e: GestureResponderEvent,\n    gestureState: PanResponderGestureState\n  ) => {\n    if (this.props.disabled) {\n      return;\n    }\n\n    this._setCurrentValue(this._getValue(gestureState));\n    this._fireChangeEvent(EventEnum.onSlidingComplete);\n  };\n\n  _measureContainer = (layout: LayoutChangeEvent) => {\n    this._handleMeasure(SizeEnum._containerSize, layout);\n  };\n\n  _measureTrack = (layout: LayoutChangeEvent) => {\n    this._handleMeasure(SizeEnum._trackSize, layout);\n  };\n\n  _measureThumb = (layout: LayoutChangeEvent) => {\n    this._handleMeasure(SizeEnum._thumbSize, layout);\n  };\n\n  _handleMeasure = (storeName: SizeEnum, layout: LayoutChangeEvent) => {\n    const { width, height } = layout.nativeEvent.layout;\n    const size = { width, height };\n\n    const currentSize = this[storeName];\n    if (\n      currentSize &&\n      width === currentSize.width &&\n      height === currentSize.height\n    ) {\n      return;\n    }\n    this[storeName] = size;\n\n    if (this._containerSize && this._trackSize && this._thumbSize) {\n      this.setState({\n        containerSize: this._containerSize,\n        trackSize: this._trackSize,\n        thumbSize: this._thumbSize,\n        allMeasured: true,\n      });\n    }\n  };\n\n  _getRatio = (value: number) =>\n    (value - this.props.minimumValue) /\n    (this.props.maximumValue - this.props.minimumValue);\n\n  _getThumbLeft = (value: number) => {\n    const nonRtlRatio = this._getRatio(value);\n    const ratio = I18nManager.isRTL ? 1 - nonRtlRatio : nonRtlRatio;\n    return (\n      ratio * (this.state.containerSize.width - this.state.thumbSize.width)\n    );\n  };\n\n  _getValue = (gestureState: PanResponderGestureState) => {\n    const { containerSize, thumbSize } = this.state;\n    const { minimumValue, maximumValue, step } = this.props;\n    const length = containerSize.width - thumbSize.width;\n    const thumbLeft = this._previousLeft + gestureState.dx;\n\n    const nonRtlRatio = thumbLeft / length;\n    const ratio = I18nManager.isRTL ? 1 - nonRtlRatio : nonRtlRatio;\n\n    if (step) {\n      return Math.max(\n        minimumValue!,\n        Math.min(\n          maximumValue,\n          minimumValue +\n            Math.round((ratio * (maximumValue - minimumValue)) / step) * step\n        )\n      );\n    }\n    return Math.max(\n      minimumValue,\n      Math.min(\n        maximumValue,\n        ratio * (maximumValue - minimumValue) + minimumValue\n      )\n    );\n  };\n\n  _getCurrentValue = () => this.currentValue;\n\n  _setCurrentValue = (value: number) => {\n    this.state.value.setValue(value);\n  };\n\n  _setCurrentValueAnimated = (value: number) => {\n    const animationType = this.props.animationType;\n    const animationConfig = Object.assign(\n      {},\n      DEFAULT_ANIMATION_CONFIGS[animationType!],\n      this.props.animationConfig,\n      {\n        toValue: value,\n      }\n    );\n\n    Animated[animationType!](this.state.value, animationConfig).start();\n  };\n\n  _fireChangeEvent = (event: EventEnum) => {\n    const callback = this.props[event];\n    if (callback) {\n      callback(this._getCurrentValue());\n    }\n  };\n\n  _getTouchOverflowSize = () => {\n    const state = this.state;\n    const props = this.props;\n\n    const size: Size = {\n      width: 0,\n      height: 0,\n    };\n    if (state.allMeasured === true && props.thumbTouchSize) {\n      size.width = Math.max(\n        0,\n        props.thumbTouchSize.width - state.thumbSize.width\n      );\n      size.height = Math.max(\n        0,\n        props.thumbTouchSize.height - state.containerSize.height\n      );\n    }\n\n    return size;\n  };\n\n  _getTouchOverflowStyle = () => {\n    const { width, height } = this._getTouchOverflowSize();\n\n    const touchOverflowStyle: StyleProp<ViewStyle> = {};\n    if (width !== undefined && height !== undefined) {\n      const verticalMargin = -height / 2;\n      touchOverflowStyle.marginTop = verticalMargin;\n      touchOverflowStyle.marginBottom = verticalMargin;\n\n      const horizontalMargin = -width / 2;\n      touchOverflowStyle.marginLeft = horizontalMargin;\n      touchOverflowStyle.marginRight = horizontalMargin;\n    }\n\n    if (this.props.debugTouchArea === true) {\n      touchOverflowStyle.backgroundColor = 'orange';\n      touchOverflowStyle.opacity = 0.5;\n    }\n\n    return touchOverflowStyle;\n  };\n\n  _thumbHitTest = (e: GestureResponderEvent) => {\n    const nativeEvent = e.nativeEvent;\n    const thumbTouchRect = this._getThumbTouchRect();\n    return thumbTouchRect.containsPoint(\n      nativeEvent.locationX,\n      nativeEvent.locationY\n    );\n  };\n\n  _getThumbTouchRect = () => {\n    const state = this.state;\n    const { thumbTouchSize } = this.props;\n    const touchOverflowSize = this._getTouchOverflowSize();\n\n    return new Rect(\n      touchOverflowSize.width / 2 +\n        this._getThumbLeft(this._getCurrentValue()) +\n        (state.thumbSize.width - thumbTouchSize!.width) / 2,\n      touchOverflowSize.height / 2 +\n        (state.containerSize.height - thumbTouchSize!.height) / 2,\n      thumbTouchSize!.width,\n      thumbTouchSize!.height\n    );\n  };\n\n  _renderDebugThumbTouchRect = (thumbLeft: Animated.AnimatedInterpolation) => {\n    const thumbTouchRect = this._getThumbTouchRect();\n    const positionStyle = {\n      left: thumbLeft,\n      top: thumbTouchRect.y,\n      width: thumbTouchRect.width,\n      height: thumbTouchRect.height,\n    };\n\n    return (\n      <Animated.View\n        style={[defaultStyles.debugThumbTouchArea, positionStyle]}\n        pointerEvents=\"none\"\n      />\n    );\n  };\n\n  _renderThumbImage = () => {\n    const { thumbImage, renderThumb } = this.props;\n\n    if (renderThumb) {\n      return renderThumb();\n    }\n\n    if (!thumbImage) return;\n\n    return <Image source={thumbImage} />;\n  };\n}\n\nconst defaultStyles = StyleSheet.create({\n  container: {\n    height: 40,\n    justifyContent: 'center',\n  },\n  track: {\n    height: TRACK_SIZE,\n    borderRadius: TRACK_SIZE / 2,\n  },\n  thumb: {\n    position: 'absolute',\n    width: THUMB_SIZE,\n    height: THUMB_SIZE,\n    borderRadius: THUMB_SIZE / 2,\n  },\n  touchArea: {\n    position: 'absolute',\n    backgroundColor: 'transparent',\n    top: 0,\n    left: 0,\n    right: 0,\n    bottom: 0,\n  },\n  debugThumbTouchArea: {\n    position: 'absolute',\n    backgroundColor: 'green',\n    opacity: 0.5,\n  },\n});\n"]}