import React, { PureComponent } from 'react';
import { Animated, ImageSourcePropType, StyleProp, ViewStyle, LayoutChangeEvent, GestureResponderEvent, PanResponderGestureState } from 'react-native';
declare class Rect {
    x: number;
    y: number;
    width: number;
    height: number;
    constructor(x: number, y: number, width: number, height: number);
    containsPoint(x: number, y: number): boolean;
}
interface SliderProps {
    /**
     * Initial value of the slider. The value should be between minimumValue
     * and maximumValue, which default to 0 and 1 respectively.
     * Default value is 0.
     *
     * *This is not a controlled component*, e.g. if you don't update
     * the value, the component won't be reset to its inital value.
     */
    value: number;
    /**
     * If true the user won't be able to move the slider.
     * Default value is false.
     */
    disabled?: boolean;
    /**
     * Initial minimum value of the slider. Default value is 0.
     */
    minimumValue: number;
    /**
     * Initial maximum value of the slider. Default value is 1.
     */
    maximumValue: number;
    /**
     * Step value of the slider. The value should be between 0 and
     * (maximumValue - minimumValue). Default value is 0.
     */
    step: number;
    /**
     * The color used for the track to the left of the button. Overrides the
     * default blue gradient image.
     */
    minimumTrackTintColor: string;
    /**
     * The color used for the track to the right of the button. Overrides the
     * default blue gradient image.
     */
    maximumTrackTintColor: string;
    /**
     * The color used for the thumb.
     */
    thumbTintColor: string;
    /**
     * The size of the touch area that allows moving the thumb.
     * The touch area has the same center has the visible thumb.
     * This allows to have a visually small thumb while still allowing the user
     * to move it easily.
     * The default is {width: 40, height: 40}.
     */
    thumbTouchSize: {
        width: number;
        height: number;
    };
    /**
     * Callback continuously called while the user is dragging the slider.
     */
    onValueChange: (value: number) => void;
    /**
     * Callback called when the user starts changing the value (e.g. when
     * the slider is pressed).
     */
    onSlidingStart?: (value: number) => void;
    /**
     * Callback called when the user finishes changing the value (e.g. when
     * the slider is released).
     */
    onSlidingComplete?: (value: number) => void;
    /**
     * The style applied to the slider container.
     */
    style?: StyleProp<ViewStyle>;
    /**
     * The style applied to the slider container.
     */
    styles?: StyleProp<ViewStyle>;
    /**
     * The style applied to the track.
     */
    trackStyle?: StyleProp<ViewStyle>;
    /**
     * The style applied to the thumb.
     */
    thumbStyle?: StyleProp<ViewStyle>;
    /**
     * Sets an image for the thumb.
     */
    thumbImage?: ImageSourcePropType;
    /**
     * Set this to true to visually see the thumb touch rect in green.
     */
    debugTouchArea: boolean;
    /**
     * Set to true to animate values with default 'timing' animation type
     */
    animateTransitions?: boolean;
    /**
     * Custom Animation type. 'spring' or 'timing'.
     */
    animationType: 'spring' | 'timing';
    /**
     * Used to configure the animation parameters.  These are the same parameters in the Animated library.
     */
    animationConfig?: Animated.SpringAnimationConfig | Animated.TimingAnimationConfig;
    renderThumb?: () => React.ReactElement;
}
interface Size {
    width: number;
    height: number;
}
declare enum SizeEnum {
    _containerSize = "_containerSize",
    _trackSize = "_trackSize",
    _thumbSize = "_thumbSize"
}
declare enum EventEnum {
    onSlidingStart = "onSlidingStart",
    onValueChange = "onValueChange",
    onSlidingComplete = "onSlidingComplete"
}
interface SliderState {
    containerSize: Size;
    trackSize: Size;
    thumbSize: Size;
    allMeasured: boolean;
    value: Animated.Value;
}
export default class Slider extends PureComponent<SliderProps, SliderState> {
    static defaultProps: {
        value: number;
        minimumValue: number;
        maximumValue: number;
        step: number;
        minimumTrackTintColor: string;
        maximumTrackTintColor: string;
        thumbTintColor: string;
        thumbTouchSize: {
            width: number;
            height: number;
        };
        debugTouchArea: boolean;
        animationType: string;
        onValueChange: () => void;
    };
    private _panResponder;
    private _previousLeft;
    private _containerSize?;
    private _trackSize?;
    private _thumbSize?;
    private currentValue;
    constructor(props: SliderProps);
    getParams<T extends object, K extends keyof T>(o: T, name: K): T[K];
    componentDidUpdate(prevProps: SliderProps): void;
    render(): JSX.Element;
    _getPropsForComponentUpdate(props: SliderProps): {
        /**
         * If true the user won't be able to move the slider.
         * Default value is false.
         */
        disabled?: boolean | undefined;
        /**
         * Initial minimum value of the slider. Default value is 0.
         */
        minimumValue: number;
        /**
         * Initial maximum value of the slider. Default value is 1.
         */
        maximumValue: number;
        /**
         * Step value of the slider. The value should be between 0 and
         * (maximumValue - minimumValue). Default value is 0.
         */
        step: number;
        /**
         * The color used for the track to the left of the button. Overrides the
         * default blue gradient image.
         */
        minimumTrackTintColor: string;
        /**
         * The color used for the track to the right of the button. Overrides the
         * default blue gradient image.
         */
        maximumTrackTintColor: string;
        /**
         * The color used for the thumb.
         */
        thumbTintColor: string;
        /**
         * The size of the touch area that allows moving the thumb.
         * The touch area has the same center has the visible thumb.
         * This allows to have a visually small thumb while still allowing the user
         * to move it easily.
         * The default is {width: 40, height: 40}.
         */
        thumbTouchSize: {
            width: number;
            height: number;
        };
        /**
         * The style applied to the slider container.
         */
        styles?: StyleProp<ViewStyle>;
        /**
         * Sets an image for the thumb.
         */
        thumbImage?: number | import("react-native").ImageURISource | import("react-native").ImageURISource[] | undefined;
        /**
         * Set this to true to visually see the thumb touch rect in green.
         */
        debugTouchArea: boolean;
        /**
         * Set to true to animate values with default 'timing' animation type
         */
        animateTransitions?: boolean | undefined;
        /**
         * Custom Animation type. 'spring' or 'timing'.
         */
        animationType: "spring" | "timing";
        /**
         * Used to configure the animation parameters.  These are the same parameters in the Animated library.
         */
        animationConfig?: Animated.SpringAnimationConfig | Animated.TimingAnimationConfig | undefined;
        renderThumb?: (() => React.ReactElement<any, string | ((props: any) => React.ReactElement<any, string | any | (new (props: any) => React.Component<any, any, any>)> | null) | (new (props: any) => React.Component<any, any, any>)>) | undefined;
    };
    _handleStartShouldSetPanResponder: (e: GestureResponderEvent) => boolean;
    _handleMoveShouldSetPanResponder(): boolean;
    _handlePanResponderGrant: () => void;
    _handlePanResponderMove: (_e: GestureResponderEvent, gestureState: PanResponderGestureState) => void;
    _handlePanResponderRequestEnd(): boolean;
    _handlePanResponderEnd: (_e: GestureResponderEvent, gestureState: PanResponderGestureState) => void;
    _measureContainer: (layout: LayoutChangeEvent) => void;
    _measureTrack: (layout: LayoutChangeEvent) => void;
    _measureThumb: (layout: LayoutChangeEvent) => void;
    _handleMeasure: (storeName: SizeEnum, layout: LayoutChangeEvent) => void;
    _getRatio: (value: number) => number;
    _getThumbLeft: (value: number) => number;
    _getValue: (gestureState: PanResponderGestureState) => number;
    _getCurrentValue: () => number;
    _setCurrentValue: (value: number) => void;
    _setCurrentValueAnimated: (value: number) => void;
    _fireChangeEvent: (event: EventEnum) => void;
    _getTouchOverflowSize: () => Size;
    _getTouchOverflowStyle: () => ViewStyle;
    _thumbHitTest: (e: GestureResponderEvent) => boolean;
    _getThumbTouchRect: () => Rect;
    _renderDebugThumbTouchRect: (thumbLeft: Animated.AnimatedInterpolation) => JSX.Element;
    _renderThumbImage: () => JSX.Element | undefined;
}
export {};
