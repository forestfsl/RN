function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

import React, { Component } from 'react';
import { Animated } from 'react-native';
import _ from 'lodash';
import NativeLinearGradient from 'react-native-linear-gradient';

class LinearGradient extends Component {
  // Generate back the colors array with all transformed props
  _generateColorsArray(props) {
    const propsKeys = Object.keys(props);
    const colorsArray = [];
    propsKeys.forEach(key => {
      if (key.indexOf('animatedColor') !== -1 && props[key] && typeof props[key] === 'string') {
        colorsArray.push(props[key]);
      }
    });
    return colorsArray;
  }

  render() {
    const _this$props = this.props,
          {
      children
    } = _this$props,
          props = _objectWithoutProperties(_this$props, ["children"]);

    const colorsArray = this._generateColorsArray(props);

    const nativeLinearProps = _.omit(props, Object.keys(colorsArray));

    return /*#__PURE__*/React.createElement(NativeLinearGradient, _extends({}, nativeLinearProps, {
      colors: colorsArray
    }), children);
  }

}

export default Animated.createAnimatedComponent(LinearGradient);
//# sourceMappingURL=AnimatedLinearGradient.js.map