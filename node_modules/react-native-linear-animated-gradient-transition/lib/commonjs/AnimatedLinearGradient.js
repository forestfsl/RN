"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _react = _interopRequireWildcard(require("react"));

var _reactNative = require("react-native");

var _lodash = _interopRequireDefault(require("lodash"));

var _reactNativeLinearGradient = _interopRequireDefault(require("react-native-linear-gradient"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function _getRequireWildcardCache() { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

class LinearGradient extends _react.Component {
  // Generate back the colors array with all transformed props
  _generateColorsArray(props) {
    const propsKeys = Object.keys(props);
    const colorsArray = [];
    propsKeys.forEach(key => {
      if (key.indexOf('animatedColor') !== -1 && props[key] && typeof props[key] === 'string') {
        colorsArray.push(props[key]);
      }
    });
    return colorsArray;
  }

  render() {
    const _this$props = this.props,
          {
      children
    } = _this$props,
          props = _objectWithoutProperties(_this$props, ["children"]);

    const colorsArray = this._generateColorsArray(props);

    const nativeLinearProps = _lodash.default.omit(props, Object.keys(colorsArray));

    return /*#__PURE__*/_react.default.createElement(_reactNativeLinearGradient.default, _extends({}, nativeLinearProps, {
      colors: colorsArray
    }), children);
  }

}

var _default = _reactNative.Animated.createAnimatedComponent(LinearGradient);

exports.default = _default;
//# sourceMappingURL=AnimatedLinearGradient.js.map